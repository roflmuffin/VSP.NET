using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace CSGONET.API.Modules.Listeners
{
    //------------------------------------------------------------------------------
    // <auto-generated />
    //
    // This file was automatically generated by SWIG (http://www.swig.org).
    // Version 4.0.1
    //
    // Do not make changes to this file unless you know what you are doing--modify
    // the SWIG interface file instead.
    //------------------------------------------------------------------------------
    
    public class CMarshalObject : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal CMarshalObject(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CMarshalObject obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~CMarshalObject()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(true);
            global::System.GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        //NativePINVOKE.delete_CMarshalObject(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
            }
        }

        public CMarshalObject() : this(NativePINVOKE.new_CMarshalObject(), true)
        {
        }

        public virtual void PushInt(int cell)
        {
            NativePINVOKE.CMarshalObject_PushInt(swigCPtr, cell);
        }

        public virtual void PushFloat(float number)
        { 
            NativePINVOKE.CMarshalObject_PushFloat(swigCPtr, number);
        }

        public virtual void PushString(string string_)
        {
            NativePINVOKE.CMarshalObject_PushString(swigCPtr, string_);
        }

        public int GetParamCount()
        {
            int ret = NativePINVOKE.CMarshalObject_GetParamCount(swigCPtr);
            return ret;
        }

        public T GetValue<T>() where T : BaseNative
        {
            var ptr = (IntPtr)GetInt();
            return (T)Activator.CreateInstance(typeof(T), new object[] { ptr, false });
        }

        public int GetInt() => NativePINVOKE.CMarshalObject_GetInt(swigCPtr);
        public float GetFloat() => NativePINVOKE.CMarshalObject_GetFloat(swigCPtr);
        public string GetString() => NativePINVOKE.CMarshalObject_GetString(swigCPtr);

        public IntPtr GetPointer() => swigCPtr.Handle;

        public override string ToString()
        {
            return $"{base.ToString()}, ParamCount={GetParamCount()}";
        }
    }

}
